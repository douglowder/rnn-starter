diff --git a/node_modules/react-native/React/Base/RCTRootView.m b/node_modules/react-native/React/Base/RCTRootView.m
index 14524fa..697862b 100644
--- a/node_modules/react-native/React/Base/RCTRootView.m
+++ b/node_modules/react-native/React/Base/RCTRootView.m
@@ -106,8 +106,7 @@ NSString *const RCTTVDisableMenuKeyNotification = @"RCTTVDisableMenuKeyNotificat
                                                  object:nil];
 #endif
       
-    self.tvRemoteHandler = [RCTTVRemoteHandler new];
-    [self.tvRemoteHandler attachToView:self];
+    self.tvRemoteHandler = [[RCTTVRemoteHandler alloc] initWithView:self];
 #endif
 
     [self showLoadingView];
@@ -124,22 +123,6 @@ NSString *const RCTTVDisableMenuKeyNotification = @"RCTTVDisableMenuKeyNotificat
 
 #if TARGET_OS_TV
 
-- (void)enableTVMenuKey {
-    dispatch_async(dispatch_get_main_queue(), ^{
-        if (![[self gestureRecognizers] containsObject:self.tvRemoteHandler.tvMenuKeyRecognizer]) {
-            [self addGestureRecognizer:self.tvRemoteHandler.tvMenuKeyRecognizer];
-        }
-    });
-}
-
-- (void)disableTVMenuKey {
-    dispatch_async(dispatch_get_main_queue(), ^{
-        if ([[self gestureRecognizers] containsObject:self.tvRemoteHandler.tvMenuKeyRecognizer]) {
-            [self removeGestureRecognizer:self.tvRemoteHandler.tvMenuKeyRecognizer];
-        }
-    });
-}
-
 #if RCT_DEV
 - (void)showDevMenu {
     dispatch_async(dispatch_get_main_queue(), ^{
@@ -431,7 +414,6 @@ RCT_NOT_IMPLEMENTED(-(instancetype)initWithCoder : (NSCoder *)aDecoder)
 
 - (void)dealloc
 {
-    [self.tvRemoteHandler detachFromView:self];
     self.tvRemoteHandler = nil;
   [_contentView invalidate];
 }
diff --git a/node_modules/react-native/React/Base/RCTTVRemoteHandler.h b/node_modules/react-native/React/Base/RCTTVRemoteHandler.h
index 62dd2bd..1329be2 100644
--- a/node_modules/react-native/React/Base/RCTTVRemoteHandler.h
+++ b/node_modules/react-native/React/Base/RCTTVRemoteHandler.h
@@ -26,13 +26,7 @@ extern NSString *const RCTTVRemoteEventSwipeDown;
 
 @interface RCTTVRemoteHandler : NSObject
 
-@property (nonatomic, copy, readonly) NSDictionary *tvRemoteGestureRecognizers;
-@property (nonatomic, strong) UITapGestureRecognizer *tvMenuKeyRecognizer;
-
-- (void)attachToView:(UIView * _Nonnull)view;
-- (void)detachFromView:(UIView * _Nonnull)view;
-- (void)enableTVMenuKeyForView:(UIView * _Nonnull)view;
-- (void)disableTVMenuKeyForView:(UIView * _Nonnull)view;
+- (RCTTVRemoteHandler *)initWithView:(UIView * _Nonnull)view;
 
 + (BOOL)useMenuKey;
 + (void)setUseMenuKey:(BOOL)useMenuKey;
diff --git a/node_modules/react-native/React/Base/RCTTVRemoteHandler.m b/node_modules/react-native/React/Base/RCTTVRemoteHandler.m
index f9b9989..a13ac3f 100644
--- a/node_modules/react-native/React/Base/RCTTVRemoteHandler.m
+++ b/node_modules/react-native/React/Base/RCTTVRemoteHandler.m
@@ -37,10 +37,21 @@ NSString *const RCTTVRemoteEventSwipeRight = @"swipeRight";
 NSString *const RCTTVRemoteEventSwipeUp = @"swipeUp";
 NSString *const RCTTVRemoteEventSwipeDown = @"swipeDown";
 
+@interface RCTTVRemoteHandler()
+
+@property (nonatomic, copy, readonly) NSDictionary *tvRemoteGestureRecognizers;
+@property (nonatomic, strong) UITapGestureRecognizer *tvMenuKeyRecognizer;
+@property (nonatomic, weak) UIView *view;
+
+@end
+
 @implementation RCTTVRemoteHandler {
   NSMutableDictionary<NSString *, UIGestureRecognizer *> *_tvRemoteGestureRecognizers;
 }
 
+#pragma mark -
+#pragma mark Static setting for using menu key
+
 static __volatile BOOL __useMenuKey = NO;
 
 + (BOOL)useMenuKey
@@ -53,133 +64,162 @@ static __volatile BOOL __useMenuKey = NO;
     __useMenuKey = useMenuKey;
 }
 
-- (void)attachToView:(UIView *)view
+#pragma mark -
+#pragma mark Public methods
+
+- (instancetype)initWithView:(UIView *)view
+{
+  if ((self = [super init])) {
+      _view = view;
+      [self setUpGestureRecognizers];
+      [self attachToView];
+  }
+  return self;
+}
+
+- (void)dealloc
+{
+    [self detachFromView];
+}
+
+#pragma mark -
+#pragma mark Private methods
+
+- (void)setUpGestureRecognizers
+{
+    _tvRemoteGestureRecognizers = [NSMutableDictionary dictionary];
+  // Recognizers for Apple TV remote buttons
+  // Menu recognizer
+  self.tvMenuKeyRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(menuPressed:)];
+  self.tvMenuKeyRecognizer.allowedPressTypes = @[@(UIPressTypeMenu)];
+
+  // Play/Pause
+  [self addTapGestureRecognizerWithSelector:@selector(playPausePressed:)
+                                  pressType:UIPressTypePlayPause
+                                       name:RCTTVRemoteEventPlayPause];
+
+  // Select
+  [self addTapGestureRecognizerWithSelector:@selector(selectPressed:)
+                                  pressType:UIPressTypeSelect
+                                       name:RCTTVRemoteEventSelect];
+
+  // Up
+  [self addTapGestureRecognizerWithSelector:@selector(tappedUp:)
+                                  pressType:UIPressTypeUpArrow
+                                       name:RCTTVRemoteEventUp];
+
+  // Down
+  [self addTapGestureRecognizerWithSelector:@selector(tappedDown:)
+                                  pressType:UIPressTypeDownArrow
+                                       name:RCTTVRemoteEventDown];
+
+  // Left
+  [self addTapGestureRecognizerWithSelector:@selector(tappedLeft:)
+                                  pressType:UIPressTypeLeftArrow
+                                       name:RCTTVRemoteEventLeft];
+
+  // Right
+  [self addTapGestureRecognizerWithSelector:@selector(tappedRight:)
+                                  pressType:UIPressTypeRightArrow
+                                       name:RCTTVRemoteEventRight];
+
+  // Recognizers for long button presses
+  // We don't intercept long menu press -- that's used by the system to go to the home screen
+
+  [self addLongPressGestureRecognizerWithSelector:@selector(longPlayPausePressed:)
+                                        pressType:UIPressTypePlayPause
+                                             name:RCTTVRemoteEventLongPlayPause];
+
+  [self addLongPressGestureRecognizerWithSelector:@selector(longSelectPressed:)
+                                        pressType:UIPressTypeSelect
+                                             name:RCTTVRemoteEventLongSelect];
+
+  // Recognizers for Apple TV remote trackpad swipes
+
+  // Up
+  [self addSwipeGestureRecognizerWithSelector:@selector(swipedUp:)
+                                    direction:UISwipeGestureRecognizerDirectionUp
+                                         name:RCTTVRemoteEventSwipeUp];
+
+  // Down
+  [self addSwipeGestureRecognizerWithSelector:@selector(swipedDown:)
+                                    direction:UISwipeGestureRecognizerDirectionDown
+                                         name:RCTTVRemoteEventSwipeDown];
+
+  // Left
+  [self addSwipeGestureRecognizerWithSelector:@selector(swipedLeft:)
+                                    direction:UISwipeGestureRecognizerDirectionLeft
+                                         name:RCTTVRemoteEventSwipeLeft];
+
+  // Right
+  [self addSwipeGestureRecognizerWithSelector:@selector(swipedRight:)
+                                    direction:UISwipeGestureRecognizerDirectionRight
+                                         name:RCTTVRemoteEventSwipeRight];
+
+}
+
+- (void)attachToView
 {
-    [[NSNotificationCenter defaultCenter] addObserver:view
+    [[NSNotificationCenter defaultCenter] addObserver:self
                                              selector:@selector(enableTVMenuKey)
                                                  name:RCTTVEnableMenuKeyNotification
                                                object:nil];
 
-    [[NSNotificationCenter defaultCenter] addObserver:view
+    [[NSNotificationCenter defaultCenter] addObserver:self
                                              selector:@selector(disableTVMenuKey)
                                                  name:RCTTVDisableMenuKeyNotification
                                                object:nil];
     for (NSString *key in [self.tvRemoteGestureRecognizers allKeys]) {
-      [view addGestureRecognizer:self.tvRemoteGestureRecognizers[key]];
+      [_view addGestureRecognizer:self.tvRemoteGestureRecognizers[key]];
     }
     if ([RCTTVRemoteHandler useMenuKey]) {
-        [self enableTVMenuKeyForView:view];
+        [self enableTVMenuKey];
     } else {
-        [self disableTVMenuKeyForView:view];
+        [self disableTVMenuKey];
     }
 }
 
-- (void)detachFromView:(UIView *)view
+- (void)detachFromView
 {
-    [self disableTVMenuKeyForView:view];
+    if ([[self.view gestureRecognizers] containsObject:self.tvMenuKeyRecognizer]) {
+        [self.view removeGestureRecognizer:self.tvMenuKeyRecognizer];
+    }
     for (NSString *key in [self.tvRemoteGestureRecognizers allKeys]) {
-      [view removeGestureRecognizer:self.tvRemoteGestureRecognizers[key]];
+      [_view removeGestureRecognizer:self.tvRemoteGestureRecognizers[key]];
     }
-    [[NSNotificationCenter defaultCenter] removeObserver:view
+    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                     name:RCTTVEnableMenuKeyNotification
                                                   object:nil];
-    [[NSNotificationCenter defaultCenter] removeObserver:view
+    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                     name:RCTTVDisableMenuKeyNotification
                                                   object:nil];
     
 }
 
-- (void)enableTVMenuKeyForView:(UIView *)view
-{
-    if (![[view gestureRecognizers] containsObject:self.tvMenuKeyRecognizer]) {
-        [view addGestureRecognizer:self.tvMenuKeyRecognizer];
-    }
-}
+# pragma mark -
+# pragma mark Notification handlers
 
-- (void)disableTVMenuKeyForView:(UIView *)view
+- (void)enableTVMenuKey
 {
-    if ([[view gestureRecognizers] containsObject:self.tvMenuKeyRecognizer]) {
-        [view removeGestureRecognizer:self.tvMenuKeyRecognizer];
-    }
+    dispatch_async(dispatch_get_main_queue(), ^{
+        if (![[self.view gestureRecognizers] containsObject:self.tvMenuKeyRecognizer]) {
+            [self.view addGestureRecognizer:self.tvMenuKeyRecognizer];
+        }
+    });
 }
 
-- (instancetype)init
+- (void)disableTVMenuKey
 {
-  if ((self = [super init])) {
-    _tvRemoteGestureRecognizers = [NSMutableDictionary dictionary];
-
-    // Recognizers for Apple TV remote buttons
-    // Menu recognizer
-    self.tvMenuKeyRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(menuPressed:)];
-    self.tvMenuKeyRecognizer.allowedPressTypes = @[@(UIPressTypeMenu)];
-
-    // Play/Pause
-    [self addTapGestureRecognizerWithSelector:@selector(playPausePressed:)
-                                    pressType:UIPressTypePlayPause
-                                         name:RCTTVRemoteEventPlayPause];
-
-    // Select
-    [self addTapGestureRecognizerWithSelector:@selector(selectPressed:)
-                                    pressType:UIPressTypeSelect
-                                         name:RCTTVRemoteEventSelect];
-
-    // Up
-    [self addTapGestureRecognizerWithSelector:@selector(tappedUp:)
-                                    pressType:UIPressTypeUpArrow
-                                         name:RCTTVRemoteEventUp];
-
-    // Down
-    [self addTapGestureRecognizerWithSelector:@selector(tappedDown:)
-                                    pressType:UIPressTypeDownArrow
-                                         name:RCTTVRemoteEventDown];
-
-    // Left
-    [self addTapGestureRecognizerWithSelector:@selector(tappedLeft:)
-                                    pressType:UIPressTypeLeftArrow
-                                         name:RCTTVRemoteEventLeft];
-
-    // Right
-    [self addTapGestureRecognizerWithSelector:@selector(tappedRight:)
-                                    pressType:UIPressTypeRightArrow
-                                         name:RCTTVRemoteEventRight];
-
-    // Recognizers for long button presses
-    // We don't intercept long menu press -- that's used by the system to go to the home screen
-
-    [self addLongPressGestureRecognizerWithSelector:@selector(longPlayPausePressed:)
-                                          pressType:UIPressTypePlayPause
-                                               name:RCTTVRemoteEventLongPlayPause];
-
-    [self addLongPressGestureRecognizerWithSelector:@selector(longSelectPressed:)
-                                          pressType:UIPressTypeSelect
-                                               name:RCTTVRemoteEventLongSelect];
-
-    // Recognizers for Apple TV remote trackpad swipes
-
-    // Up
-    [self addSwipeGestureRecognizerWithSelector:@selector(swipedUp:)
-                                      direction:UISwipeGestureRecognizerDirectionUp
-                                           name:RCTTVRemoteEventSwipeUp];
-
-    // Down
-    [self addSwipeGestureRecognizerWithSelector:@selector(swipedDown:)
-                                      direction:UISwipeGestureRecognizerDirectionDown
-                                           name:RCTTVRemoteEventSwipeDown];
-
-    // Left
-    [self addSwipeGestureRecognizerWithSelector:@selector(swipedLeft:)
-                                      direction:UISwipeGestureRecognizerDirectionLeft
-                                           name:RCTTVRemoteEventSwipeLeft];
-
-    // Right
-    [self addSwipeGestureRecognizerWithSelector:@selector(swipedRight:)
-                                      direction:UISwipeGestureRecognizerDirectionRight
-                                           name:RCTTVRemoteEventSwipeRight];
-  }
-
-  return self;
+    dispatch_async(dispatch_get_main_queue(), ^{
+        if ([[self.view gestureRecognizers] containsObject:self.tvMenuKeyRecognizer]) {
+            [self.view removeGestureRecognizer:self.tvMenuKeyRecognizer];
+        }
+    });
 }
 
+# pragma mark -
+# pragma mark Gesture handlers
+
 - (void)playPausePressed:(UIGestureRecognizer *)r
 {
   [self sendAppleTVEvent:RCTTVRemoteEventPlayPause toView:r.view];
@@ -251,6 +291,7 @@ static __volatile BOOL __useMenuKey = NO;
 }
 
 #pragma mark -
+#pragma mark Convenience methods for adding gesture recognizers
 
 - (void)addLongPressGestureRecognizerWithSelector:(nonnull SEL)selector
                                         pressType:(UIPressType)pressType
diff --git a/node_modules/react-native/React/Views/RCTModalHostView.m b/node_modules/react-native/React/Views/RCTModalHostView.m
index 6a15330..1bd6d89 100644
--- a/node_modules/react-native/React/Views/RCTModalHostView.m
+++ b/node_modules/react-native/React/Views/RCTModalHostView.m
@@ -49,7 +49,7 @@ RCT_NOT_IMPLEMENTED(-(instancetype)initWithCoder : coder)
     _menuButtonGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self
                                                                            action:@selector(menuButtonPressed:)];
     _menuButtonGestureRecognizer.allowedPressTypes = @[ @(UIPressTypeMenu) ];
-    self.tvRemoteHandler = [RCTTVRemoteHandler new];
+    self.tvRemoteHandler = [[RCTTVRemoteHandler alloc] initWithView:self];
 #endif
     _isPresented = NO;
 
@@ -63,6 +63,11 @@ RCT_NOT_IMPLEMENTED(-(instancetype)initWithCoder : coder)
 }
 
 #if TARGET_OS_TV
+- (void)dealloc
+{
+    self.tvRemoteHandler = nil;
+}
+
 - (void)menuButtonPressed:(__unused UIGestureRecognizer *)gestureRecognizer
 {
   if (_onRequestClose) {
@@ -119,11 +124,6 @@ RCT_NOT_IMPLEMENTED(-(instancetype)initWithCoder : coder)
   [super insertReactSubview:subview atIndex:atIndex];
   [_touchHandler attachToView:subview];
 #if TARGET_OS_TV
-  for (NSString *key in [self.tvRemoteHandler.tvRemoteGestureRecognizers allKeys]) {
-    if (![key isEqualToString:RCTTVRemoteEventMenu]) {
-      [subview addGestureRecognizer:self.tvRemoteHandler.tvRemoteGestureRecognizers[key]];
-    }
-  }
   if (_onRequestClose) {
     [subview addGestureRecognizer:_menuButtonGestureRecognizer];
   }
@@ -143,9 +143,6 @@ RCT_NOT_IMPLEMENTED(-(instancetype)initWithCoder : coder)
   if (_menuButtonGestureRecognizer) {
     [subview removeGestureRecognizer:_menuButtonGestureRecognizer];
   }
-  for (UIGestureRecognizer *gr in self.tvRemoteHandler.tvRemoteGestureRecognizers) {
-    [subview removeGestureRecognizer:gr];
-  }
 #endif
   _reactSubview = nil;
 }
diff --git a/node_modules/react-native/React/Views/ScrollView/RCTScrollContentView.m b/node_modules/react-native/React/Views/ScrollView/RCTScrollContentView.m
index cf6a0b1..bca659f 100644
--- a/node_modules/react-native/React/Views/ScrollView/RCTScrollContentView.m
+++ b/node_modules/react-native/React/Views/ScrollView/RCTScrollContentView.m
@@ -14,13 +14,20 @@
 
 @implementation RCTScrollContentView
 
+- (void)didMoveToWindow
+{
+  [super didMoveToWindow];
+  RCTScrollView *scrollView = (RCTScrollView *)self.superview.superview;
+  [scrollView updateContentOffsetIfNeeded];
+}
+
 - (void)reactSetFrame:(CGRect)frame
 {
   [super reactSetFrame:frame];
 
   RCTScrollView *scrollView = (RCTScrollView *)self.superview.superview;
 
-  if (!scrollView) {
+  if (!scrollView || !self.window) {
     return;
   }
 
diff --git a/node_modules/react-native/React/Views/UIView+React.h b/node_modules/react-native/React/Views/UIView+React.h
index f9f1d71..67c665b 100644
--- a/node_modules/react-native/React/Views/UIView+React.h
+++ b/node_modules/react-native/React/Views/UIView+React.h
@@ -12,10 +12,6 @@
 
 @class RCTShadowView;
 
-#if TARGET_OS_TV
-@class RCTTVRemoteHandler;
-#endif
-
 @interface UIView (React) <RCTComponent>
 
 /**
@@ -131,11 +127,4 @@
  */
 - (NSString *)react_recursiveDescription;
 
-#if TARGET_OS_TV
-@property (nonatomic, strong) RCTTVRemoteHandler *tvRemoteHandler;
-
-- (void)enableTVMenuKey;
-- (void)disableTVMenuKey;
-#endif
-
 @end
diff --git a/node_modules/react-native/React/Views/UIView+React.m b/node_modules/react-native/React/Views/UIView+React.m
index fce0d48..d42c7b3 100644
--- a/node_modules/react-native/React/Views/UIView+React.m
+++ b/node_modules/react-native/React/Views/UIView+React.m
@@ -13,10 +13,6 @@
 #import "RCTLog.h"
 #import "RCTShadowView.h"
 
-#if TARGET_OS_TV
-#import "RCTTVRemoteHandler.h"
-#endif
-
 @implementation UIView (React)
 
 - (NSNumber *)reactTag
@@ -380,26 +376,4 @@
   return description;
 }
 
-#if TARGET_OS_TV
-
-- (void)enableTVMenuKey
-{
-    dispatch_async(dispatch_get_main_queue(), ^{
-        if (self.tvRemoteHandler) {
-            [self.tvRemoteHandler enableTVMenuKeyForView:self];
-        }
-    });
-}
-
-- (void)disableTVMenuKey
-{
-    dispatch_async(dispatch_get_main_queue(), ^{
-        if (self.tvRemoteHandler) {
-            [self.tvRemoteHandler disableTVMenuKeyForView:self];
-        }
-    });
-}
-#endif
-
-
 @end
